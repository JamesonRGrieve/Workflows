name: Submodule Management
on:
  workflow_call:
    inputs:
      fallback_branch:
        description: "Branch to use when current branch doesn't exist in submodule"
        required: false
        type: string
        default: "dev"
      ignore_submodules:
        description: "Comma-separated list of submodules to ignore"
        required: false
        type: string
        default: ""
      runs_on:
        required: false
        type: string
        default: "self-hosted"

jobs:
  manage-submodules:
    runs-on: ${{ inputs.runs_on }}
    name: Manage Submodules
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ github.token }}
          fetch-depth: 0
          submodules: recursive

      - name: Get current branch
        id: get-branch
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "actions-user"
          git config --global user.email "actions-user@users.noreply.github.com"

      - name: Synchronize submodule branches
        run: |
          CURRENT_BRANCH="${{ steps.get-branch.outputs.branch }}"
          FALLBACK_BRANCH="${{ inputs.fallback_branch }}"

          git submodule foreach --quiet 'echo $name' > submodules.txt

          IFS=',' read -ra IGNORE_SUBMODULES <<< "${{ inputs.ignore_submodules }}"

          CHANGES_MADE=false

          while IFS= read -r submodule; do
            SKIP=false
            for ignore in "${IGNORE_SUBMODULES[@]}"; do
              ignore=$(echo "$ignore" | xargs)
              if [ "$ignore" == "$submodule" ]; then
                echo "Skipping ignored submodule: $submodule"
                SKIP=true
                break
              fi
            done
            
            if [ "$SKIP" = true ]; then
              continue
            fi
            
            echo "Processing submodule: $submodule"
            
            cd "$submodule"
            
            git fetch origin
            
            TARGET_BRANCH=""
            
            if git ls-remote --exit-code --heads origin "$CURRENT_BRANCH" >/dev/null 2>&1; then
              echo "  Branch '$CURRENT_BRANCH' exists in $submodule"
              TARGET_BRANCH="$CURRENT_BRANCH"
            else
              echo "  Branch '$CURRENT_BRANCH' does not exist in $submodule, using fallback '$FALLBACK_BRANCH'"
              if git ls-remote --exit-code --heads origin "$FALLBACK_BRANCH" >/dev/null 2>&1; then
                TARGET_BRANCH="$FALLBACK_BRANCH"
              else
                echo "  ERROR: Neither '$CURRENT_BRANCH' nor fallback '$FALLBACK_BRANCH' exist in $submodule"
                cd "$GITHUB_WORKSPACE"
                continue
              fi
            fi
            
            CURRENT_SUB_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$CURRENT_SUB_BRANCH" != "$TARGET_BRANCH" ]; then
              if git show-ref --verify --quiet "refs/heads/$TARGET_BRANCH"; then
                git checkout "$TARGET_BRANCH"
              else
                git checkout -b "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
              fi
              CHANGES_MADE=true
            fi
            
            git pull origin "$TARGET_BRANCH"
            
            cd "$GITHUB_WORKSPACE"
          done < submodules.txt

          if [ "$CHANGES_MADE" = true ]; then
            if ! git diff --quiet; then
              git add -A
              git commit -m "chore: update submodule references"
              git push
            fi
          fi
