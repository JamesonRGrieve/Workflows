name: Reusable Bandit Security Check with Regression Detection

# This reusable workflow is triggered by other workflows using 'workflow_call'
on:
  workflow_call:
    inputs:
      target_branch_to_compare:
        description: "Target branch to compare against (e.g., main)"
        required: true
        type: string
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
    outputs:
      bandit_issues_json:
        description: "JSON output of Bandit issues on PR branch"
        value: ${{ jobs.run-bandit.outputs.bandit_issues_json }}

jobs:
  # Job 1: Run Bandit on the PR branch
  run-bandit:
    name: Run Bandit on PR Branch & Extract Results
    runs-on: ${{ inputs.runs_on }}
    outputs:
      bandit_issues_json: ${{ steps.extract-pr.outputs.BANDIT_JSON }}
    steps:
      # Step 1: Checkout the current pull request code
      - name: Checkout PR Branch
        uses: actions/checkout@v4.1.1
        with:
          persist-credentials: false

      # Step 2: Set up Python 3.10 environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install Bandit (Python security scanner)
      - name: Install Bandit
        run: pip install bandit

      # Step 4: Run Bandit and output results to a file
      - name: Run Bandit on PR Branch
        run: |
          bandit -r . -f json -o pr_bandit_output.json || true

      # Step 5: Upload the results as a GitHub Actions artifact (for debugging or reporting)
      - name: Upload PR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr_bandit_output
          path: pr_bandit_output.json

      # Step 6: Extract the raw issue list from the Bandit JSON output
      - name: Extract PR Bandit JSON
        id: extract-pr
        run: |
          CONTENT=$(cat pr_bandit_output.json | jq -c '.results')
          echo "BANDIT_JSON=$CONTENT" >> $GITHUB_OUTPUT

  # Job 2: Run Bandit on the target branch for comparison
  run-bandit-on-target:
    name: Run Bandit on Target Branch
    runs-on: ${{ inputs.runs_on }}
    outputs:
      bandit_target_json: ${{ steps.extract-target.outputs.TARGET_JSON }}
    steps:
      # Step 1: Checkout the base branch (e.g., main)
      - name: Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch_to_compare }}
          persist-credentials: false

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install Bandit
      - name: Install Bandit
        run: pip install bandit

      # Step 4: Run Bandit and save output
      - name: Run Bandit on Target Branch
        run: |
          bandit -r . -f json -o target_bandit_output.json || true

      # Step 5: Upload results from the target branch
      - name: Upload Target Artifact
        uses: actions/upload-artifact@v4
        with:
          name: target_bandit_output
          path: target_bandit_output.json

      # Step 6: Extract raw issue list from the Bandit output
      - name: Extract Target Bandit JSON
        id: extract-target
        run: |
          CONTENT=$(cat target_bandit_output.json | jq -c '.results')
          echo "TARGET_JSON=$CONTENT" >> $GITHUB_OUTPUT

  # Job 3: Compare the PR results against the target to detect regressions
  compare-bandit:
    name: Compare Bandit Issues (Regression Analysis)
    runs-on: ${{ inputs.runs_on }}
    needs: [run-bandit, run-bandit-on-target]
    steps:
      - name: Compare JSON
        run: |
          echo "Comparing Bandit results between PR and target branch..."

          echo "${{ needs.run-bandit.outputs.bandit_issues_json }}" > pr.json
          echo "${{ needs.run-bandit-on-target.outputs.bandit_target_json }}" > target.json

          # Compare both JSON lists to find issues present in PR but not in target
          NEW_ISSUES=$(jq -n --argfile pr pr.json --argfile base target.json '
            $pr - $base | length')

          echo "New security issues introduced: $NEW_ISSUES"

          if [ "$NEW_ISSUES" -gt 0 ]; then
            echo "::error::New Bandit issues introduced in PR branch."
            exit 1
          else
            echo "No new security issues introduced."
          fi
