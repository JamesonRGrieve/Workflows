name: Meta Regression Analysis

on:
  workflow_call:
    inputs:
      item_type_singular:
        description: "Singular name for the items being compared (e.g., test, file)."
        required: false
        type: string
        default: "item"
      item_type_plural:
        description: "Plural name for the items being compared (e.g., tests, files)."
        required: false
        type: string
        default: "items"
      pr_number:
        description: "Pull request number for artifact naming."
        required: false
        type: string
      run_id:
        description: "Current run ID for artifact naming if PR number is not available."
        required: true
        type: string
      target_branch_artifact_name:
        description: "Name of the artifact containing target branch passing items."
        required: true
        type: string
      pr_branch_artifact_name:
        description: "Name of the artifact containing PR branch failing items."
        required: true
        type: string
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
    outputs:
      has_regressions:
        description: "Boolean indicating if regressions were found."
        value: ${{ jobs.analyze.outputs.HAS_REGRESSIONS }}
      regression_count:
        description: "Number of regressions found."
        value: ${{ jobs.analyze.outputs.REGRESSION_COUNT }}
      regression_details_file_name: # Output the file name for clarity
        description: "Name of the artifact file containing regression details."
        value: "regression_details.txt"

jobs:
  analyze:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      HAS_REGRESSIONS: ${{ steps.check-regressions-script.outputs.HAS_REGRESSIONS }}
      REGRESSION_COUNT: ${{ steps.check-regressions-script.outputs.REGRESSION_COUNT }}
    steps:
      - name: Download target branch data
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.target_branch_artifact_name }}
          path: ./target_data
        continue-on-error: true

      - name: Download PR branch data
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.pr_branch_artifact_name }}
          path: ./pr_data
        continue-on-error: true

      - name: Run regression analysis script
        id: check-regressions-script
        env:
          ITEM_TYPE_SINGULAR_ENV: "${{ inputs.item_type_singular }}"
          ITEM_TYPE_PLURAL_ENV: "${{ inputs.item_type_plural }}"
        run: |
          # Create debug file for detailed output
          exec 3>&1 4>&2
          exec 1> >(tee -a debug_regression_analysis.log) 2>&1

          echo "Running regression analysis..."

          python3 - <<'EOF'
          import json
          import os
          import sys

          item_type_s = os.environ.get('ITEM_TYPE_SINGULAR_ENV', 'item')
          item_type_p = os.environ.get('ITEM_TYPE_PLURAL_ENV', 'items')

          regression_items_list = []
          has_regressions_output = "false"
          regression_count_output = 0

          try:
              def load_items_from_file(file_path, description):
                  """Load items from a JSON file, return empty list if file doesn't exist or is invalid."""
                  if not os.path.exists(file_path):
                      print(f"{description} file not found at {file_path}, defaulting to empty list.")
                      return []
                  
                  try:
                      with open(file_path, 'r') as f:
                          data = json.load(f)
                      
                      if isinstance(data, list):
                          return data
                      elif isinstance(data, dict) and 'items' in data:
                          # Support both direct list format and wrapped format
                          return data['items'] if isinstance(data['items'], list) else []
                      else:
                          print(f"::warning::{description} file does not contain a list or dict with 'items' key. Got {type(data)}. Defaulting to empty list.")
                          return []
                  except json.JSONDecodeError as e:
                      print(f"::warning::JSONDecodeError for {description}: {e}. Defaulting to empty list.")
                      return []
                  except Exception as e:
                      print(f"::warning::Error reading {description}: {e}. Defaulting to empty list.")
                      return []

              # Load data from artifact files
              target_passing = load_items_from_file('./target_data/passing_items.json', "Target passing items")
              pr_failing = load_items_from_file('./pr_data/failing_items.json', "PR failing items")
              
              print(f"Parsed {len(target_passing)} passing/clean {item_type_p} from target branch.")
              print(f"Parsed {len(pr_failing)} failing/issue {item_type_p} from PR branch.")
              
              target_passing_set = set(target_passing)
              pr_failing_set = set(pr_failing)
              
              regression_items_list = sorted(list(target_passing_set.intersection(pr_failing_set)))
              
              if regression_items_list:
                  print(f"Found {len(regression_items_list)} regression(s)!")
                  has_regressions_output = "true"
                  regression_count_output = len(regression_items_list)
                  with open("regression_details.txt", "w") as f:
                      f.write(f"Found {len(regression_items_list)} {item_type_p} that were passing/clean in the target branch but are now failing/have issues in the PR branch:\n\n")
                      for idx, item in enumerate(regression_items_list, 1):
                          f.write(f"{idx}. {item}\n")
                  print("Regression details written to regression_details.txt")
              else:
                  print(f"No new regressions found for {item_type_p}.")
                  with open("regression_details.txt", "w") as f:
                      f.write(f"No new regressions detected for {item_type_p} (items that were passing/clean in target and are now failing/with issues in PR).\n")

          except Exception as e:
              print(f"::error::Error in regression analysis script: {e}", file=sys.stderr)
              import traceback
              print(traceback.format_exc(), file=sys.stderr)
              with open("regression_details.txt", "w") as f:
                  f.write(f"An error occurred during regression analysis: {e}\n")

          github_output_file = os.environ.get('GITHUB_OUTPUT')
          if github_output_file:
              with open(github_output_file, 'a') as f_out:
                  f_out.write(f'HAS_REGRESSIONS={has_regressions_output}\n')
                  f_out.write(f'REGRESSION_COUNT={regression_count_output}\n')
              print(f"Output HAS_REGRESSIONS={has_regressions_output} to GITHUB_OUTPUT")
              print(f"Output REGRESSION_COUNT={regression_count_output} to GITHUB_OUTPUT")
          else:
              print("::warning::GITHUB_OUTPUT environment variable not set.")
          EOF

          # Restore stdout/stderr for GitHub Actions
          exec 1>&3 2>&4

          echo "Regression analysis script completed."

          # Only show regression summary in logs if regressions found
          if [ -f "regression_details.txt" ]; then
            REGRESSION_COUNT=$(grep -c "^[0-9]\+\." regression_details.txt || echo "0")
            if [ "$REGRESSION_COUNT" -gt 0 ]; then
              echo "::error::Found $REGRESSION_COUNT regression(s). Details available in artifact."
            else
              echo "No regressions detected."
            fi
          fi

      - name: Upload debug logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression_analysis_debug_logs_${{ inputs.pr_number || inputs.run_id }}
          path: debug_regression_analysis.log
          retention-days: 7
          if-no-files-found: ignore

      - name: Fail job if regressions are found
        if: steps.check-regressions-script.outputs.HAS_REGRESSIONS == 'true'
        run: |
          echo "Regressions detected. Failing the job as per configuration."
          REGRESSION_COUNT_VAL=${{ steps.check-regressions-script.outputs.REGRESSION_COUNT }}
          echo "### :x: Regressions Found!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # Newline
          echo "**$REGRESSION_COUNT_VAL regression(s) detected.** This job was intentionally failed." >> $GITHUB_STEP_SUMMARY
          echo "The 'Upload regression details artifact' step will still attempt to upload details." >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Upload regression details artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression_details_pr_${{ inputs.pr_number || inputs.run_id }}_${{ inputs.item_type_plural }}
          path: regression_details.txt
          retention-days: 7
